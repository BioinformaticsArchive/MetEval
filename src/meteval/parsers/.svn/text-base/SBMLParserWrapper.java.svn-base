/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package meteval.parsers;

import meteval.types.MetModel;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author gieku
 */
 public class SBMLParserWrapper {
    private final String PYTHON_INTERPRETER_CALL = "python3.2";
    public SBMLParserWrapper(File parserFile){
        parser = parserFile;
    }
    public MetModel parse(File sbmlFile,File destination){
        MetModel newModel = new MetModel();
        String baseName = sbmlFile.getName();
        baseName = stripExtension(baseName);
        destination = new File(baseName);
        execParser(sbmlFile,destination);
        newModel.setAssociatedSBML(sbmlFile);
        newModel.setAssociatedSurreyFormat(destination);
        File externalsFile = getExternalsFile(destination);
        newModel.setAssociatedExternalsFile(externalsFile);
        newModel.setName(baseName);
        return newModel;
    }
    private File getExternalsFile(File destination){
       String name =  destination.getName()+"_ext";
       File dir = destination.getParentFile();
       return new File(dir,name);
    }
    private String stripExtension(String fileName){
        if(fileName != null && fileName.contains(".")){
            int dotPos = fileName.lastIndexOf(".");
            fileName =  fileName.substring(0,dotPos);
        }
        return fileName;
    }
    private void execParser(File inputFile,File outputFile){
        Runtime runtime = Runtime.getRuntime();
        String interpreterCall = PYTHON_INTERPRETER_CALL;
        String parserCall = parser.getAbsolutePath();
        String inputParam = inputFile.getAbsolutePath();
        String outputParam = outputFile.getAbsolutePath();
        String command = String.format("%s %s %s %s",interpreterCall, parserCall, inputParam,outputParam );
        try {
            runtime.exec(command);
        } catch (IOException ex) {
            Logger.getLogger(SBMLParserWrapper.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private File parser;
}
