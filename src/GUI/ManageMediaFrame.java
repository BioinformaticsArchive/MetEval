/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ManageMediaFrame.java
 *
 * Created on Oct 17, 2011, 1:56:15 PM
 */
package GUI;

import MetEvalmain.CompoundManager;
import MetEvalmain.MetEvalApp;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.LinkedList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import meteval.types.Medium;
import meteval.types.MetModel;
import meteval.types.MetModelCollection;

/**
 *
 * @author gieku
 */
public class ManageMediaFrame extends javax.swing.JFrame {

    private  class RefreshManager implements WindowListener {

        public RefreshManager(ManageMediaFrame aThis) {
            this.manager = aThis;
        }
private ManageMediaFrame manager;
        public void windowOpened(WindowEvent we) {
        }

        public void windowClosing(WindowEvent we) {
            
        }

        public void windowClosed(WindowEvent we) {
           manager.populateComponents();
        }

        public void windowIconified(WindowEvent we) {
        }

        public void windowDeiconified(WindowEvent we) {
        }

        public void windowActivated(WindowEvent we) {
        }

        public void windowDeactivated(WindowEvent we) {
        }
    }

    /** Creates new form ManageMediaFrame */
    public ManageMediaFrame(MetEvalApp app) {
        initComponents();
        this.app = app;
        populateComponents();
        this.setVisible(true);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }
MetEvalApp app;
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        availableMedia = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        currentMedium = new javax.swing.JList();
        removeButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        availableMedia.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        availableMedia.setName("availableMedia"); // NOI18N
        jScrollPane1.setViewportView(availableMedia);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        currentMedium.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        currentMedium.setName("currentMedium"); // NOI18N
        jScrollPane2.setViewportView(currentMedium);

        removeButton.setText("Remove");
        removeButton.setName("removeButton"); // NOI18N
        removeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeButtonMouseClicked(evt);
            }
        });

        editButton.setText("Edit");
        editButton.setName("editButton"); // NOI18N
        editButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editButtonMouseClicked(evt);
            }
        });

        newButton.setText("New");
        newButton.setName("newButton"); // NOI18N
        newButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newButtonMouseClicked(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.setName("exitButton"); // NOI18N
        exitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(removeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 117, Short.MAX_VALUE)
                        .addComponent(exitButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeButton)
                    .addComponent(editButton)
                    .addComponent(newButton)
                    .addComponent(exitButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void removeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeButtonMouseClicked
        Medium selected = (Medium) this.availableMedia.getSelectedValue();
        if(selected != null){
            app.removeMedium(selected);
            this.populateComponents();
        }
    }//GEN-LAST:event_removeButtonMouseClicked

    private void editButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editButtonMouseClicked
        Medium selected = (Medium) this.availableMedia.getSelectedValue();
        if(selected != null){
            MediumFrame editFrame = new MediumFrame(selected,app);
            editFrame.addWindowListener(new RefreshManager(this));
        }
    }//GEN-LAST:event_editButtonMouseClicked

    private void newButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newButtonMouseClicked
        MetModelCollection chosenCollection  = CollectionChooser.showDialog(null, app,"Choose base-collection for new medium");
        MetModel selected = (MetModel) JOptionPane.showInputDialog(this, "Select model which external metabolites you want to use as a base for new medium", "Model selection", WIDTH, null, chosenCollection.getModels().toArray(), chosenCollection.getModels().getFirst());
        LinkedList<String> commonExternals = CompoundManager.getExternals(selected);
        MediumFrame newMediumFrame = new MediumFrame(commonExternals,app);
        newMediumFrame.addWindowListener(new RefreshManager(this));
        
    }//GEN-LAST:event_newButtonMouseClicked

    private void exitButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitButtonMouseClicked
        this.dispose();
    }//GEN-LAST:event_exitButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList availableMedia;
    private javax.swing.JList currentMedium;
    private javax.swing.JButton editButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton newButton;
    private javax.swing.JButton removeButton;
    // End of variables declaration//GEN-END:variables

    private void populateComponents() {
        
        populateAvailableMediaList();
        populateCurrentMediumList();
    }

    private void populateAvailableMediaList() {
        DefaultListModel listModel = new DefaultListModel();
        this.availableMedia.setModel(listModel);
        for(Medium medium:app.getAllMedia()){
            listModel.addElement(medium);
        }
    }

    private void populateCurrentMediumList() {
        Medium selected = (Medium) this.availableMedia.getSelectedValue();
        DefaultListModel listModel = new DefaultListModel();
        this.currentMedium.setModel(listModel);
        if(selected != null){
            
            for(String s:selected.getFormulation().keySet()){
                Float value = selected.getFormulation().get(s);
                listModel.addElement(s + value );
            }
        }
    }
}
