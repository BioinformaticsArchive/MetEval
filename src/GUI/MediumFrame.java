/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MediumFrame.java
 *
 * Created on Sep 20, 2011, 11:46:47 AM
 */
package GUI;

import MetEvalmain.CompoundManager;
import MetEvalmain.MetEvalApp;
import java.util.HashMap;
import java.util.LinkedList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import meteval.types.Medium;
import meteval.types.MetModel;
import meteval.types.MetModelCollection;

/**
 *
 * @author gieku
 */
public class MediumFrame extends javax.swing.JFrame {

    /** Creates new form MediumFrame */
    public MediumFrame(LinkedList<String> availableCompounds,MetEvalApp app) {
        initComponents();
        this.availableCompounds = availableCompounds;
        this.app = app;
        populateComponents();
        this.setVisible(true);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }
    public MediumFrame(Medium medium,MetEvalApp app) {
        initComponents();
        MetModelCollection chosenCollection = CollectionChooser.showDialog(null, app,"choose collection which compounds will serve as base in your medium");
        MetModel selected = (MetModel) JOptionPane.showInputDialog(null, "Select model which external metabolites you want to use as a base for new medium", "Model selection", WIDTH, null, chosenCollection.getModels().toArray(), chosenCollection.getModels().getFirst());
        LinkedList<String> commonExternals = CompoundManager.getExternals(selected);
        this.availableCompounds = commonExternals;
        this.app = app;
        editedMedium = medium;
        populateComponents();
        this.setVisible(true);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }
    private LinkedList<String>  availableCompounds;
    private MetEvalApp app;
    
    private void populateComponents(){
        populateIngridientList();
    }
    private LinkedList<String> excludedComps = new LinkedList<String>();
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jScrollPane2 = new javax.swing.JScrollPane();
        ingridientsList = new javax.swing.JList();
        addIngridientButton = new javax.swing.JButton();
        mediumNameField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        removeIngridientButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        jMenuBar1.setName("jMenuBar1"); // NOI18N

        jMenu1.setText("File");
        jMenu1.setName("jMenu1"); // NOI18N
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenu2.setName("jMenu2"); // NOI18N
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Medium creation ");

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        ingridientsList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        ingridientsList.setName("ingridientsList"); // NOI18N
        ingridientsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ingridientsListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(ingridientsList);

        addIngridientButton.setText("Add Ingredient");
        addIngridientButton.setName("addIngridientButton"); // NOI18N
        addIngridientButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addIngridientButtonMouseClicked(evt);
            }
        });

        mediumNameField.setName("mediumNameField"); // NOI18N

        jLabel1.setText("Formula name");
        jLabel1.setName("jLabel1"); // NOI18N

        removeIngridientButton.setText("Remove");
        removeIngridientButton.setName("removeIngridientButton"); // NOI18N
        removeIngridientButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeIngridientButtonMouseClicked(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.setName("saveButton"); // NOI18N
        saveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveButtonMouseClicked(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelButtonMouseClicked(evt);
            }
        });

        jButton1.setText("Change quantity");
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(mediumNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(26, 26, 26)
                            .addComponent(cancelButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(saveButton)
                            .addGap(12, 12, 12)))
                    .addComponent(addIngridientButton, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                    .addComponent(removeIngridientButton, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE))
                .addGap(6, 6, 6)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mediumNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(12, 12, 12)
                        .addComponent(addIngridientButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeIngridientButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 141, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(saveButton)
                            .addComponent(cancelButton))
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addIngridientButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addIngridientButtonMouseClicked
        String comp = CompoundChooser.showCompSelectionDialog(this, availableCompounds);
        Float quantity = showQuantityInputDialog();
        if(quantity != null && !isAlreadyPresentInMedium(comp)){
            editedMedium.addIngridient(comp, quantity);
            populateComponents();
        }
    }//GEN-LAST:event_addIngridientButtonMouseClicked
private boolean isAlreadyPresentInMedium(String comp){
    for (String compound:editedMedium.getFormulation().keySet()){
        if(compound.equals(comp))return true;
    }
    return false;
}
    private Float showQuantityInputDialog(){
    Float quantity = Float.parseFloat(JOptionPane.showInputDialog("'Ingredient quantity:")) ;
    if(quantity == null){
        JOptionPane.showMessageDialog(this, "Incorrect quantity");
    }
    return quantity;
    }
    private Float showQuantityInputDialog(float defaultVal){
    Float quantity = Float.parseFloat(JOptionPane.showInputDialog("Ingredient quantity:",defaultVal)) ;
    if(quantity == null){
        JOptionPane.showMessageDialog(this, "Incorrect quantity");
    }
    return quantity;
    }
    private void removeIngridientButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeIngridientButtonMouseClicked
        String selected = (String) ingridientsList.getSelectedValue();
        if(selected != null){
          
            editedMedium.removeIngridient(selected);
            populateComponents();
        }
    }//GEN-LAST:event_removeIngridientButtonMouseClicked

    private void ingridientsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ingridientsListValueChanged
        
    }//GEN-LAST:event_ingridientsListValueChanged

    private void saveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseClicked
        if(nameFieldFilled()){
            setMediumName();
            constrainUnselected();
            app.removeMedium(editedMedium);
            app.addNewMedium(editedMedium);
            app.saveMedia();
            this.dispose();
        }
        else JOptionPane.showMessageDialog(this, "Fill formula name first");
    }//GEN-LAST:event_saveButtonMouseClicked
    private void setMediumName(){
        String mediumName = mediumNameField.getText();
        editedMedium.setName(mediumName);
    }
    private void constrainUnselected(){
        for (String externalCompound:availableCompounds){
            if(!this.isAlreadyPresentInMedium(externalCompound)){
                   editedMedium.addIngridient(externalCompound, 0);
            }
        }
    }
    private void cancelButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseClicked
        this.dispose();
    }//GEN-LAST:event_cancelButtonMouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        String selected = (String) this.ingridientsList.getSelectedValue();
        if(selected != null){
           
            HashMap<String,Float> formulation = editedMedium.getFormulation();
            Float nn = formulation.get(selected);
            Float newQuantity = this.showQuantityInputDialog(nn);
            if(newQuantity != null){
                editedMedium.removeIngridient(selected);
                editedMedium.addIngridient(selected, newQuantity);
            }
        }
    }//GEN-LAST:event_jButton1MouseClicked
private Medium editedMedium = new Medium();
    /**
     * @param args the command line arguments
     */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addIngridientButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JList ingridientsList;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField mediumNameField;
    private javax.swing.JButton removeIngridientButton;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables

  
 

    private void populateIngridientList() {
        DefaultListModel listModel = new DefaultListModel();
        this.ingridientsList.setModel(listModel);
            for(String compoundName:editedMedium.getFormulation().keySet()){
                
                    listModel.addElement(compoundName);
                    //excludedComps.add(compoundName);
            }
    }

    private boolean nameFieldFilled() {
        String mediumName = mediumNameField.getText();
        if(mediumName.isEmpty()){
            return false;
        }
        else return true;
    }

   
}
