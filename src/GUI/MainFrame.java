/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on Sep 8, 2011, 8:40:54 PM
 */
package GUI;

import MetEvalmain.CompoundManager;
import MetEvalmain.MetEvalApp;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import meteval.SurreyWrapper.FbaResult;
import meteval.SurreyWrapper.Result;
import meteval.SurreyWrapper.TradeoffResult;
import meteval.types.Medium;
import meteval.types.MetModel;
import meteval.types.MetModelCollection;
import meteval.types.Objective;
import meteval.types.Reaction;
import org.jdesktop.application.Action;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.XYSeries;

/**
 *
 * @author gieku
 */
public class MainFrame extends javax.swing.JFrame {

    /** Creates new form MainFrame */
    public MainFrame(MetEvalApp app) {
        initComponents();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        this.app = app;
    }
    private boolean showingResults = false;
    private boolean showingCollection = false;
private MetEvalApp app;
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        collectionTable = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        saveToCsvMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        tradeoffMenuItem = new javax.swing.JMenuItem();
        fbaMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MetEVal - Metabolic Simulations Framework");

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        collectionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Model Name", "Reactions", "Metabolites", "Orphan metabolites", "Genome size", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        collectionTable.setName("collectionTable"); // NOI18N
        jScrollPane1.setViewportView(collectionTable);

        jMenuBar1.setName("jMenuBar1"); // NOI18N

        jMenu1.setText("File");
        jMenu1.setName("jMenu1"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(MainFrame.class, this);
        jMenuItem1.setAction(actionMap.get("chooseCollectionToLoad")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenu1.add(jMenuItem1);

        saveToCsvMenuItem.setAction(actionMap.get("saveResultsAsCSV")); // NOI18N
        saveToCsvMenuItem.setName("saveToCsvMenuItem"); // NOI18N
        jMenu1.add(saveToCsvMenuItem);

        jSeparator2.setName("jSeparator2"); // NOI18N
        jMenu1.add(jSeparator2);

        jMenuItem6.setAction(actionMap.get("createNewMedium")); // NOI18N
        jMenuItem6.setName("jMenuItem6"); // NOI18N
        jMenu1.add(jMenuItem6);

        jMenuItem2.setAction(actionMap.get("openCollectionsFrame")); // NOI18N
        jMenuItem2.setName("jMenuItem2"); // NOI18N
        jMenu1.add(jMenuItem2);

        jSeparator1.setName("jSeparator1"); // NOI18N
        jMenu1.add(jSeparator1);

        jMenuItem7.setAction(actionMap.get("runCollectionManager")); // NOI18N
        jMenuItem7.setName("jMenuItem7"); // NOI18N
        jMenu1.add(jMenuItem7);

        jMenuItem8.setAction(actionMap.get("manageMedia")); // NOI18N
        jMenuItem8.setName("jMenuItem8"); // NOI18N
        jMenu1.add(jMenuItem8);

        jSeparator3.setName("jSeparator3"); // NOI18N
        jMenu1.add(jSeparator3);

        jMenuBar1.add(jMenu1);

        jMenu4.setText("View");
        jMenu4.setName("jMenu4"); // NOI18N

        jMenuItem5.setAction(actionMap.get("plot")); // NOI18N
        jMenuItem5.setName("jMenuItem5"); // NOI18N
        jMenu4.add(jMenuItem5);

        jMenuBar1.add(jMenu4);

        jMenu3.setText("Analysis");
        jMenu3.setName("jMenu3"); // NOI18N

        tradeoffMenuItem.setAction(actionMap.get("runTradeoff")); // NOI18N
        tradeoffMenuItem.setName("tradeoffMenuItem"); // NOI18N
        jMenu3.add(tradeoffMenuItem);

        fbaMenuItem.setAction(actionMap.get("RunFBA")); // NOI18N
        fbaMenuItem.setName("fbaMenuItem"); // NOI18N
        jMenu3.add(fbaMenuItem);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
JFrame collectionsFrame;
    @Action
    public void openCollectionsFrame() {
        collectionsFrame = new CollectionsFrame(app);
    }

    @Action
    public void chooseCollectionToLoad() {
        MetModelCollection chosen = CollectionChooser.showDialog(this, app);
        if(chosen != null){
            this.currentCollection = chosen;
            displayCollection(chosen);
            activateCollectionActions();
            this.setShowingCollection(true);
        }
    }
    
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//
//            public void run() {
//                new MainFrame().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable collectionTable;
    private javax.swing.JMenuItem fbaMenuItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JMenuItem saveToCsvMenuItem;
    private javax.swing.JMenuItem tradeoffMenuItem;
    // End of variables declaration//GEN-END:variables
    private void displayCollection(MetModelCollection chosen) {
        if(chosen != null){
        DefaultTableModel tableModel = new DefaultTableModel();
        this.collectionTable.setModel(tableModel);
        decorateTable(tableModel);
        
        for(MetModel model:chosen.getModels()){
            int metaboliteCount = model.getCompounds().size();
            int reactionsCount = model.getReactions().size();
            Object[] os = {model,reactionsCount,metaboliteCount};
            tableModel.addRow(os);
        }
            }
    }
    private void decorateTable(DefaultTableModel tableModel){
        tableModel.addColumn("Model name");
        tableModel.addColumn("Reactions");
        tableModel.addColumn("Metabolites");
        tableModel.addColumn("Orphan metabolites");
        tableModel.addColumn("Genome size");
        tableModel.addColumn("Descripction");
    }

    @Action
    public void RunFBA() {
        if(!showingCollection){
            JOptionPane.showMessageDialog(this, "No collection chosen - please select collection using \"Open Collection\" from file menu");
            return;
        }
       Medium fullMedium =   app.AddFullMedium(currentCollection.getModels().getFirst());
        String objReact = this.selectObjective(currentCollection.getModels().getFirst().getReactions());//JOptionPane.showInputDialog("Id of reaction to maximize");
        Objective objective = new Objective(objReact);
        LinkedList<Medium> availableMedia = this.app.getAllMedia();
        Medium medium = (Medium)  JOptionPane.showInputDialog(this, "Select medium ", "Medium selection", WIDTH, null, availableMedia.toArray(), availableMedia.getFirst());
        LinkedList<FbaResult> results = new LinkedList<FbaResult>();
        for(MetModel model:this.currentCollection.getModels()){
            Result result = app.sfba.fba(model, objective, medium);
            result.setAssociatedModel(model);
            FbaResult  fresult = (FbaResult) result;
            results.add(fresult);
                    }
        FbaResultTable(results);
        this.fbaResulttable = results;
        this.tradeoffResult = null;
        app.removeMedium(fullMedium);
    }
    private  void FbaResultTable(LinkedList<FbaResult> results){
        DefaultTableModel tableModel = new DefaultTableModel();
        this.collectionTable.setModel(tableModel);
        tableModel.addColumn("Model");
        tableModel.addColumn("Result");
        for(FbaResult result:results){
            Object[] os = {result.getAssociatedModel(),result.getResult()};
            tableModel.addRow(os);
        }
        this.setShowingResults(true);
    }
    private void tradeoffResultTable(LinkedHashMap<Double,Double> results){
        DefaultTableModel tableModel = new DefaultTableModel();
        this.collectionTable.setModel(tableModel);
        tableModel.addColumn("First reaction flux");
        tableModel.addColumn("Second reaction flux");
        for(Double result:results.keySet()){
            Object[] os = {result,results.get(result)};
            tableModel.addRow(os);
        }
        setShowingResults(true);
    }

    @Action
    public void runTradeoff() {
        if(!this.showingCollection){
            JOptionPane.showMessageDialog(this, "No collection chosen - please select collection first using \"open collection\" from File menu ");
            return;
        }
        LinkedList<MetModel> availableOptions = currentCollection.getModels();
        
        MetModel selected = (MetModel) JOptionPane.showInputDialog(this, "Select model for which you want to run pareto front estimation routine", "Model selection", WIDTH, null, availableOptions.toArray(), availableOptions.getFirst());
        Medium fullMedium = app.AddFullMedium(selected);
        LinkedList<Medium> availableMedia = this.app.getAllMedia();
        Medium medium = (Medium)  JOptionPane.showInputDialog(this, "Select medium for which you want to run pareto front estimation routine", "Model selection", WIDTH, null, availableMedia.toArray(), availableMedia.getFirst());
        String firstObj = this.selectObjective(selected.getReactions(),"Selected first reaction to be maximized");
        String secondObj = this.selectObjective(selected.getReactions(),"Select second reaction to be maximized");
        Objective fObj = new Objective(firstObj);
        Objective sObj = new Objective(secondObj);
        TradeoffResult result =  app.sfba.tradeoff(selected, fObj, sObj, medium);
        tradeoffResult = result;
        this.fbaResulttable = null;
        tradeoffResultTable(result.getResultTable());
        app.removeMedium(fullMedium);
    }

    @Action
    public void plot() {
       if(tradeoffResult != null) tradeoffPlot();
       if(fbaResulttable != null) fbaPlot();
    }
    
    private void tradeoffPlot(){
        //TradeoffResult tradeoffResult = (TradeoffResult) currentResults;
        DefaultTableXYDataset dataset = new DefaultTableXYDataset();
        XYSeries series= new XYSeries("Pareto front estimation",false,false);
        for(double d:tradeoffResult.getResultTable().keySet()){
            Double x = d;//rxn00340
            Double y = tradeoffResult.getResultTable().get(x);
            series.add(x,y);
        }
        dataset.addSeries(series);
        JFreeChart chart = ChartFactory.createXYAreaChart("Pareto front estimation","biomass production","Second objective",dataset,PlotOrientation.HORIZONTAL,false,false,false);
         ChartFrame frame1=new ChartFrame("Pareto front estimation",chart);
         frame1.setVisible(true);
         frame1.setExtendedState(MAXIMIZED_BOTH);
    }
    private TradeoffResult tradeoffResult;
    private LinkedList<FbaResult> fbaResulttable;
    private MetModelCollection currentCollection;

    private void sortResults(){
        Collections.sort(fbaResulttable);
    }
    private void fbaPlot() {
         DefaultCategoryDataset dataset= new DefaultCategoryDataset();
         sortResults();
         for(FbaResult result:this.fbaResulttable){
             dataset.addValue(result.getResult(), result.getAssociatedModel().getName(), "Model");
         }
         
       
       String plotTitle = "Biomass production"; 
       String xaxis = "Species";
       String yaxis = "Flux rate"; 
       PlotOrientation orientation = PlotOrientation.VERTICAL; 
       boolean show = true; 
       boolean toolTips = true;
       boolean urls = false; 
       JFreeChart chart = ChartFactory.createBarChart( plotTitle, xaxis, yaxis, 
                dataset, orientation, show, toolTips, urls);
       ChartFrame frame1=new ChartFrame("FBA",chart);
         frame1.setVisible(true);
         frame1.setExtendedState(MAXIMIZED_BOTH);
    }
    private String selectObjective(LinkedList<Reaction> reactions){
        Reaction obj = ReactionChooser.showDialog(this, reactions,"choose reaction to maximize");
        return obj.getName();
    }
    private String selectObjective(LinkedList<Reaction> reactions,String title){
        Reaction obj = ReactionChooser.showDialog(this, reactions,title);
        return obj.getName();
    }
    @Action
    public void createNewMedium() {
        MetModelCollection chosenCollection  = CollectionChooser.showDialog(null, app,"Choose base-collection for new medium");
        MetModel selected = (MetModel) JOptionPane.showInputDialog(this, "Select model which external metabolites you want to use as a base for new medium", "Model selection", WIDTH, null, chosenCollection.getModels().toArray(), chosenCollection.getModels().getFirst());
        LinkedList<String> commonExternals = CompoundManager.getExternals(selected);
        MediumFrame newMediumFrame = new MediumFrame(commonExternals,app);
    }

    @Action
    public void saveResultsAsCSV() {
        if(!(showingResults || showingCollection)){
            JOptionPane.showMessageDialog(this, "Nothing to be exported!");
            return ;
        }
        JFileChooser chooser = new JFileChooser();
        if(chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
            File selected = chooser.getSelectedFile();
            File csv;
            if (selected.getName().endsWith(".csv")){
                csv = selected;
            }
            else csv = new File(selected.getAbsolutePath()+".csv");
            fillCsvFile(csv);
        }
    }
    private void fillCsvFile(File csv){
        DefaultTableModel tableModel =  (DefaultTableModel) collectionTable.getModel();
        int columns = tableModel.getColumnCount();
        int rows = tableModel.getRowCount();
        try {
            FileWriter writer = new FileWriter(csv);
        
        for(int row = 0 ;row < rows;row++){
            for(int column = 0; column < columns; column++){
                String content =  ""+tableModel.getValueAt(row, column);
                writer.write(content +"\t");
            }
            writer.write("\n");
        }
        writer.close();
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void activateCollectionActions() {
        this.tradeoffMenuItem.setEnabled(true);
        this.fbaMenuItem.setEnabled(true);
        this.saveToCsvMenuItem.setEnabled(true);
    }

    @Action
    public void runCollectionManager() {
        manageCollectionsFrame collectionManager = new manageCollectionsFrame(app);
    }

    @Action
    public void manageMedia() {
         ManageMediaFrame mediaManager = new ManageMediaFrame(app);
    }
    private void setShowingCollection(boolean b){
        showingCollection = b;
        if(showingCollection)showingResults = false;
    }
    private void setShowingResults(boolean b) {
        showingResults = b;
        if(showingResults)showingCollection = false;
    }
    
}
