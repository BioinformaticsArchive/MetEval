/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * manageCollectionsFrame.java
 *
 * Created on Oct 16, 2011, 7:43:57 PM
 */
package GUI;

import MetEvalmain.MetEvalApp;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.event.WindowStateListener;
import java.util.HashMap;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import meteval.types.MetModel;
import meteval.types.MetModelCollection;

/**
 *
 * @author gieku
 */
public class manageCollectionsFrame extends javax.swing.JFrame {

    private  class RefreshManager implements WindowListener {

        public RefreshManager(manageCollectionsFrame manager) {
            this.manager = manager;
        }
        
private manageCollectionsFrame manager;
        


        public void windowOpened(WindowEvent we) {
        }

        public void windowClosing(WindowEvent we) {
        }

        public void windowClosed(WindowEvent we) {
             manager.populateComponents();
        }

        public void windowIconified(WindowEvent we) {
        }

        public void windowDeiconified(WindowEvent we) {
        }

        public void windowActivated(WindowEvent we) {
        }

        public void windowDeactivated(WindowEvent we) {
        }
    }

    /** Creates new form manageCollectionsFrame */
    public manageCollectionsFrame(MetEvalApp app) {
        initComponents();
        this.app = app;
        populateComponents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setVisible(true);
    }
MetEvalApp app;
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        availableCollectionsList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        currentCollection = new javax.swing.JList();
        removeButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        modelsTotalLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        availableCollectionsList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        availableCollectionsList.setName("availableCollectionsList"); // NOI18N
        availableCollectionsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                availableCollectionsListMouseClicked(evt);
            }
        });
        availableCollectionsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                availableCollectionsListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(availableCollectionsList);

        jLabel1.setText("Models total:");
        jLabel1.setName("jLabel1"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        currentCollection.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        currentCollection.setName("currentCollection"); // NOI18N
        jScrollPane2.setViewportView(currentCollection);

        removeButton.setText("Remove");
        removeButton.setName("removeButton"); // NOI18N
        removeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeButtonMouseClicked(evt);
            }
        });

        editButton.setText("Edit");
        editButton.setName("editButton"); // NOI18N
        editButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editButtonMouseClicked(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.setName("exitButton"); // NOI18N
        exitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitButtonMouseClicked(evt);
            }
        });

        newButton.setText("New");
        newButton.setName("newButton"); // NOI18N
        newButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newButtonMouseClicked(evt);
            }
        });

        modelsTotalLabel.setText("     ");
        modelsTotalLabel.setName("modelsTotalLabel"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(modelsTotalLabel))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(removeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 112, Short.MAX_VALUE)
                        .addComponent(exitButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(modelsTotalLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeButton)
                    .addComponent(editButton)
                    .addComponent(exitButton)
                    .addComponent(newButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void removeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeButtonMouseClicked
        MetModelCollection selected = (MetModelCollection) this.availableCollectionsList.getSelectedValue();
        if(selected != null){
            String message = String.format("Do you really wish to remove %s from repository?", selected);
            int decision = JOptionPane.showConfirmDialog(this, message);
            if(decision == JOptionPane.OK_OPTION){
                app.removeCollection(selected);
                this.populateComponents();
            }
        }
    }//GEN-LAST:event_removeButtonMouseClicked

    private void editButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editButtonMouseClicked
        MetModelCollection selected = (MetModelCollection) this.availableCollectionsList.getSelectedValue();
        if(selected != null){
            CollectionsFrame editCollectionFrame = new CollectionsFrame(app,selected);
            editCollectionFrame.addWindowListener(new RefreshManager(this));
        }
    }//GEN-LAST:event_editButtonMouseClicked

    private void newButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newButtonMouseClicked
        CollectionsFrame newCollectionFrame = new CollectionsFrame(app);
        newCollectionFrame.addWindowListener(new RefreshManager(this));
    }//GEN-LAST:event_newButtonMouseClicked

    private void availableCollectionsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_availableCollectionsListValueChanged
        this.populateCollectionPreview();
    }//GEN-LAST:event_availableCollectionsListValueChanged

    private void exitButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitButtonMouseClicked
        this.dispose();
    }//GEN-LAST:event_exitButtonMouseClicked

    private void availableCollectionsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_availableCollectionsListMouseClicked
      
    }//GEN-LAST:event_availableCollectionsListMouseClicked

    /**
     * @param args the command line arguments
     */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList availableCollectionsList;
    private javax.swing.JList currentCollection;
    private javax.swing.JButton editButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel modelsTotalLabel;
    private javax.swing.JButton newButton;
    private javax.swing.JButton removeButton;
    // End of variables declaration//GEN-END:variables

    private void populateComponents() {
        populateAvailableCollectionsList();
        populateCollectionPreview();
    }
   private void populateAvailableCollectionsList(){
       DefaultListModel listModel = new DefaultListModel();
       availableCollectionsList.setModel(listModel);
       for(MetModelCollection collection:app.getAvailableCollections().values()){
           listModel.addElement(collection);
       }
   }
    private void populateCollectionPreview(){
        DefaultListModel listModel = new DefaultListModel();
        currentCollection.setModel(listModel);
        MetModelCollection selected = (MetModelCollection) availableCollectionsList.getSelectedValue();
        if(selected != null){
            for(MetModel model:selected.getModels()){
                listModel.addElement(model);
            }
        }
    }
}
